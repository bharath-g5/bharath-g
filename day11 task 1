namespace searchListOfJobs
{
    class JobBO

    {


        public List<job> findJobBySal(List<job> jobList, Double salary)
        {
            List<job> results = new List<job>();
            foreach(var item in jobList)
            {
                if(item.Salary>= salary)
                {
                    results.Add(item);
                }
            }
            return results;

        }

        public List<job> findJobByLoc(List<job> jobList, string location)
        {
            List<job> results = new List<job>();
            foreach (var item in jobList)
            {
                if (item.Location == location)
                {
                    results.Add(item);
                }
            }
            return results;
        }


    }
}

namespace searchListOfJobs
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Enter the number of jobs:");
            int jobCount;
            jobCount = Convert.ToInt32(Console.ReadLine());

            List<job> obj_job = new List<job>();
            for(int i = 0; i< jobCount; i++)
            {
                string job = Console.ReadLine();
                string[] job_details = job.Split(',');
                job objjob = new job(job_details[0], job_details[1], job_details[2], job_details[3], int.Parse(job_details[4]), double.Parse(job_details[5]));
                obj_job.Add(objjob);
            }


            /*foreach (var item in obj_job)
            {
                Console.WriteLine(item);
            }*/

            Console.WriteLine("Enter a search type \n 1: By salary 2: By Location");
            int choice = int.Parse(Console.ReadLine());

           JobBO jbo = new JobBO();
            List<job> jobSearch = new List<job>();

            switch (choice)
            {
                case 1:

                    Console.WriteLine("Sorting by salary");
                    Console.WriteLine("enter salary");
                    jobSearch = jbo.findJobBySal(obj_job, Convert.ToDouble(Console.ReadLine()));

                    break;

                case 2:
                   Console.WriteLine("Sorting by Location");
                     Console.WriteLine("enter Locaion");
                    jobSearch = jbo.findJobByLoc(obj_job, Console.ReadLine());
                    break;

                 default:
                    Console.WriteLine("Invalid choice");
                    break;
            }



                foreach (var item in jobSearch)
                {
                    Console.WriteLine(item);
                }
            }




        }
    }
    namespace searchListOfJobs
{
    class job
    {
        string role;
        string skillSet;
        string emolyementType;
        string location;
        int minExp;
        double salary;

        public job()
        {
        }

        public job(string role, string skillSet, string emolyementType, string location, int minExp, double salary)
        {
            this.Role = role;
            this.SkillSet = skillSet;
            this.emolyementType = emolyementType;
            this.Location = location;
            this.MinExp = minExp;
            this.Salary = salary;
        }

        public string Role { get => role; set => role = value; }
        public string SkillSet { get => skillSet; set => skillSet = value; }
        public string EmolyementType { get => emolyementType; set => emolyementType = value; }
        public string Location { get => location; set => location = value; }
        public int MinExp { get => minExp; set => minExp = value; }
        public double Salary { get => salary; set => salary = value; }

        public override string ToString()
        {
            return String.Format("{0,15} {1,15} {2,15} {3,15} {4,15} {5,15}", Role, SkillSet, EmolyementType, Location, MinExp, Salary );
        }

        public override bool Equals(object obj)
        {
            return base.Equals(obj);
        }
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }
}
